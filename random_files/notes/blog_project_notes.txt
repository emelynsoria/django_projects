ðŸ”¶ python manage.py shell
...
(InteractiveConsole)
>>> from blog.models import Post
>>> from django.contrib.auth.models import User
>>> User.objects.all()
<QuerySet [<User: admin>]>
>>> User.objects.all()
<QuerySet [<User: admin>, <User: adrianna>]>
>>> User.objects.first()
<User: admin>
>>> User.objects.last()
<User: adrianna>
>>> User.objects.filter(username='adrianna')
<QuerySet [<User: adrianna>]>
>>> User.objects.filter(username='adri')
<QuerySet []>
>>> User.objects.filter(username='adrianna').last()
<User: adrianna>
>>> user = User.objects.filter(username='adrianna').last()
>>> user
<User: adrianna>
>>> user.id
2
>>> user.pk
2
>>> user = User.objects.get(id=1)
>>> user
<User: admin>
>>> user = User.objects.get(id=2)
>>> user
<User: adrianna>
>>> Post.objects.all()
<QuerySet []>
>>> post_1 = Post(title='Blog 1', content='First Post Content!', author=user)
>>> post_1
<Post: Post object (None)>
>>> post_1.save()   # save the posted data to 'Post' model
>>> Post.objects.all()
<QuerySet [<Post: Post object (1)>]>
>>> post_2 = Post(title='Blog 2', content='Second Post Content!', author=user)
>>> post_2
<Post: Post object (None)>
>>> post_2.id
>>> post_2.save()
>>> Post.objects.all()
<QuerySet [<Post: Post object (1)>, <Post: Post object (2)>]>
>>> exit()

ðŸ”¶ python manage.py shell
...
(InteractiveConsole)
>>> from blog.models import Post
>>> from django.contrib.auth.models import User
>>> Post.objects.all()
<QuerySet [<Post: Blog 1>, <Post: Blog 2>]>
>>> 

# add another post
>>> post_3 = Post(title='Blog 3', content='Third Post Content', author_id=user.id)
>>> post_3.save()
>>> Post.objects.all()
<QuerySet [<Post: Blog 1>, <Post: Blog 2>, <Post: Blog 3>]>
>>> post = Post.objects.first()
>>> post.content
'First Post Content!'
>>> post.date_posted
datetime.datetime(2020, 1, 7, 2, 40, 6, 183716, tzinfo=<UTC>)
>>> post.author
<User: eleven>
>>> post.author.email
''


# view post contents
>>> post_user = Post.objects.last()
>>> post_user.content
'Third Post Content'
>>> post_user.email
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Post' object has no attribute 'email'
>>> post_user.author
<User: admin>
>>> post_user.author.email
'emelyn.soria@boom.camp'
>>> 
>>> user
<User: admin>
>>> user.post_set
<django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager object at 0x7f81f56e0410>
>>> user.post_set.all() # view all user's post
<QuerySet [<Post: Blog 3>]>


# create post directly using author
>>> user = User.objects.filter(id=2)
>>> user
<QuerySet [<User: eleven>]>
>>> user.post_set.create(title='Blog Post 03', content='3rd Post Content!')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'QuerySet' object has no attribute 'post_set'
>>> user = User.objects.filter(id=2).last()
>>> user
<User: eleven>
>>> user.post_set.create(title='Blog Post 03', content='3rd Post Content!')
<Post: Blog Post 03>
>>> 

# view all posts created
>>> Post.objects.all()
<QuerySet [<Post: Blog 1>, <Post: Blog 2>, <Post: Blog 3>, <Post: Blog Post 03>]>
>>> 
>>> exit()



===============================
sample for comments

from django.db import models
from django.contrib.auth.models import User

class Comment(models.Model):
    post = models.ForeignKey(Post)
    user = models.ForeignKey(User)
    text = models.TextField()
    date = models.DateTimeField()
    reply_to = models.ForeignKey(Comment, blank=True, null=True)


class BaseCommentAbstractModel(models.Model):
"""
An abstract base class that any custom comment models probably should
subclass.
"""

# Content-object field
content_type = models.ForeignKey(ContentType,
        verbose_name=_('content type'),
        related_name="content_type_set_for_%(class)s")
object_pk = models.TextField(_('object ID'))
content_object = generic.GenericForeignKey(ct_field="content_type", fk_field="object_pk")


-----------------------------------------
ADDING MEDIA FILES:

To use 'ImageField' in django:

  ðŸ”¶ pip install Pillow


After migrating the installed Pillow package, add sample data (e.g. picture in Profile model), then run:
  
  ðŸ”¶ python manage.py shell


in terminal:
python manage.py shell
...
(InteractiveConsole)
>>> from django.contrib.auth.models import User
>>> user = User.objects.filter(username='admin')
>>> user
<QuerySet [<User: admin>]>
>>> user = User.objects.filter(username='admin').first()
>>> user
<User: admin>
>>> user.profile
<Profile: admin Profile>
>>> user.profile.image
<ImageFieldFile: profile_pics/admin.png>
>>> user.profile.image.width
512
>>> user.profile.image.height
512
>>> user.profile.image.size
10341
>>> user.profile.image.url
'profile_pics/admin.png'


# find profile of another user which uses the 'default.jpg' -- which do not exist
>>> user = User.objects.filter(username='eleven').first()
>>> user
<User: eleven>
>>> user.profile.image
<ImageFieldFile: default.jpg>
>>> user.profile.image.width
# it will return an error since 'default.jpg' doesn't exist
Traceback (most recent call last):
  File "<consoles>", line 1, in <module>
 ...
FileNotFoundError: [Errno 2] No such file or directory: '/home/webdev/django_projects/blog_project/default.jpg'
>>> user.profile.image.url
'default.jpg'


ðŸ”¶ HANDLING media files:
1. All media files will be stored in 'media' directory automatically created in the base directory by adding 'MEDIA_ROOT = os.path.join(BASE_DIR, "media")' in settings.py
2. Also, set 'MEDIA_URL' = '/media/' to handle media files in that dir
3. If there are added media files in the system before adding doing step 1 and 2, delete them all, including the directories created in the file system/ base directory, and re-add those data. It will then be added now media dirctory in the base directory.


-----------------------------
Error we get when view template does not exist

TemplateDoesNotExist at /
blog/post_list.html

  Request Method:	GET
  Request URL:	http://127.0.0.1:8000/
  Django Version:	3.0.1
  Exception Type:	TemplateDoesNotExist
  Exception Value:	
  blog/post_list.html

# <app>/<model>_<viewtype>.html


EX:
  in 'views.py'

  class PostListView(ListView):
      model = Post
      template_name = "blog/index.html" # will look for <app>/<model>_<viewtype>.html
      ...


  class PostDetailView(DetailView):
      model = Post
      # # with or without 'template_name' since it's already linked in index.html


  
--------------------------------------
ðŸ”¶ TO UPLOAD DATA from JSON file:

python manage.py shell
>>> import json
>>> from blog.models import Post
>>> with open('posts.json') as f:   # posts.json is stored in base directory
...     posts_json = json.load(f)
...     
... 
>>> for post in posts_json:
...     post = Post(title=post['title'], content=post['content'], author_id=post['user_id'])
...     post.save()
... 
# data are now saved in the database
>>> 


--------------------------------------
ðŸ”¶ TO USE PAGINATION:

>>> from django.core.paginator import Paginator
>>> posts = ['1', '2', '3', '4', '5']
>>> p = Paginator(posts, 2)
>>> p.num_pages
3
>>> for page in p.page_range:
...     print(page)
... 
1
2
3
>>> p1 = p.page(1)
>>> p1
<Page 1 of 3>
>>> p1.number
1
>>> p1.object_list
['1', '2']
>>> p1.has_previous()
False
>>> p1.has_next()
True
>>> p1.next_page_number()
2
>>> 


ðŸ”¶ and to NAVIGATE to those pages using URL:
EX:
  http://127.0.0.1:8000/?page=2
  http://127.0.0.1:8000/?page=3
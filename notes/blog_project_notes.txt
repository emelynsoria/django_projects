python manage.py shell
...
(InteractiveConsole)
>>> from blog.models import Post
>>> from django.contrib.auth.models import User
>>> User.objects.all()
<QuerySet [<User: admin>]>
>>> User.objects.all()
<QuerySet [<User: admin>, <User: adrianna>]>
>>> User.objects.first()
<User: admin>
>>> User.objects.last()
<User: adrianna>
>>> User.objects.filter(username='adrianna')
<QuerySet [<User: adrianna>]>
>>> User.objects.filter(username='adri')
<QuerySet []>
>>> User.objects.filter(username='adrianna').last()
<User: adrianna>
>>> user = User.objects.filter(username='adrianna').last()
>>> user
<User: adrianna>
>>> user.id
2
>>> user.pk
2
>>> user = User.objects.get(id=1)
>>> user
<User: admin>
>>> user = User.objects.get(id=2)
>>> user
<User: adrianna>
>>> Post.objects.all()
<QuerySet []>
>>> post_1 = Post(title='Blog 1', content='First Post Content!', author=user)
>>> post_1
<Post: Post object (None)>
>>> post_1.save()   # save the posted data to 'Post' model
>>> Post.objects.all()
<QuerySet [<Post: Post object (1)>]>
>>> post_2 = Post(title='Blog 2', content='Second Post Content!', author=user)
>>> post_2
<Post: Post object (None)>
>>> post_2.id
>>> post_2.save()
>>> Post.objects.all()
<QuerySet [<Post: Post object (1)>, <Post: Post object (2)>]>
>>> exit()

python manage.py shell
...
(InteractiveConsole)
>>> from blog.models import Post
>>> from django.contrib.auth.models import User
>>> Post.objects.all()
<QuerySet [<Post: Blog 1>, <Post: Blog 2>]>
>>> 

# add another post
>>> post_3 = Post(title='Blog 3', content='Third Post Content', author_id=user.id)
>>> post_3.save()
>>> Post.objects.all()
<QuerySet [<Post: Blog 1>, <Post: Blog 2>, <Post: Blog 3>]>
>>> post = Post.objects.first()
>>> post.content
'First Post Content!'
>>> post.date_posted
datetime.datetime(2020, 1, 7, 2, 40, 6, 183716, tzinfo=<UTC>)
>>> post.author
<User: eleven>
>>> post.author.email
''


# view post contents
>>> post_user = Post.objects.last()
>>> post_user.content
'Third Post Content'
>>> post_user.email
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Post' object has no attribute 'email'
>>> post_user.author
<User: admin>
>>> post_user.author.email
'emelyn.soria@boom.camp'
>>> 
>>> user
<User: admin>
>>> user.post_set
<django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager object at 0x7f81f56e0410>
>>> user.post_set.all() # view all user's post
<QuerySet [<Post: Blog 3>]>


# create post directly using author
>>> user = User.objects.filter(id=2)
>>> user
<QuerySet [<User: eleven>]>
>>> user.post_set.create(title='Blog Post 03', content='3rd Post Content!')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'QuerySet' object has no attribute 'post_set'
>>> user = User.objects.filter(id=2).last()
>>> user
<User: eleven>
>>> user.post_set.create(title='Blog Post 03', content='3rd Post Content!')
<Post: Blog Post 03>
>>> 

# view all posts created
>>> Post.objects.all()
<QuerySet [<Post: Blog 1>, <Post: Blog 2>, <Post: Blog 3>, <Post: Blog Post 03>]>
>>> 
>>> exit()



===============================
sample for comments

from django.db import models
from django.contrib.auth.models import User

class Comment(models.Model):
    post = models.ForeignKey(Post)
    user = models.ForeignKey(User)
    text = models.TextField()
    date = models.DateTimeField()
    reply_to = models.ForeignKey(Comment, blank=True, null=True)


class BaseCommentAbstractModel(models.Model):
"""
An abstract base class that any custom comment models probably should
subclass.
"""

# Content-object field
content_type = models.ForeignKey(ContentType,
        verbose_name=_('content type'),
        related_name="content_type_set_for_%(class)s")
object_pk = models.TextField(_('object ID'))
content_object = generic.GenericForeignKey(ct_field="content_type", fk_field="object_pk")
Django
    - a Web framework written in Python

    Web framework
        - software that supports the development of dynamic Web sites, applications, and services.
        - provides a set of tools and functionalities that solves many common problems associated with Web development, such as security features, database access, sessions, template processing, URL routing, internationalization, localization, and much more.



INSTALLED_APPS
    BASE_DIR
        - where 'manage.py' lies
        - contains PROJECT_ROOT

    
    PROJECT_ROOT
        - folder that contains setting.py
        - BASE_DIR + project_dir_name

       
    

    ----------------------------
    Built-in template tags and filters

        Built-in tag reference
            autoescape
            block
            comment
            csrf_token
            cycle
            debug
            extends
            filter
            firstof
            for
            for … empty
            if
            Boolean operators
            == operator
            != operator
            < operator
            > operator
            <= operator
            >= operator
            in operator
            not in operator
            is operator
            is not operator
            Filters
            Complex expressions
            ifequal and ifnotequal
            ifchanged
            include
            load
            lorem
            now
            regroup
                Grouping on other properties
            resetcycle
            spaceless
            templatetag
            url
            verbatim
            widthratio
            with
        Built-in filter reference
            add
            addslashes
            capfirst
            center
            cut
            date
            default
            default_if_none
            dictsort
            dictsortreversed
            divisibleby
            escape
            escapejs
            filesizeformat
            first
            floatformat
            force_escape
            get_digit
            iriencode
            join
            json_script
            last
            length
            length_is
            linebreaks
            linebreaksbr
            linenumbers
            ljust
            lower
            make_list
            phone2numeric
            pluralize
                - Returns a plural suffix if the value is not 1, '1', or an object of length 1. By default, this suffix is 's'.

                ex:
                    You have {{ num_messages }} message{{ num_messages|pluralize }}.
                    OUTPUT:
                        You have 0 messages
                        You have 1 message
                        You have 2 messages
                    
                    You have {{ num_walruses }} walrus{{ num_walruses|pluralize:"es" }}.
                    OUTPUT:
                        You have 1 walrus
                        You have 2 walruses

                    You have {{ num_cherries }} cherr{{ num_cherries|pluralize:"y,ies" }}.
                    OUTPUT:
                        You have 1 cherry
                        You have 2 cherries


            pprint
            random
                - Returns a random item from the given list.
                
                ex:
                    {{ value|random }}
                    
                If value is the list ['a', 'b', 'c', 'd'], the output could be "b".
            rjust
            safe
            safeseq
            slice
                - Returns a slice of the list.

                ex:
                    {{ some_list|slice:":2" }}
                If some_list is ['a', 'b', 'c'], the output will be ['a', 'b'].

            slugify
                - Converts to ASCII. Converts spaces to hyphens. Removes characters that aren’t alphanumerics, underscores, or hyphens. Converts to lowercase. Also strips leading and trailing whitespace.

                ex:
                    {{ value|slugify }}
                If value is "Joel is a slug", the output will be "joel-is-a-slug".

            stringformat
            striptags
            time

                ex:
                    {{ value|time:"H:i" }}
                If value is equivalent to datetime.datetime.now(), the output will be the string "01:23".

                    {% value|time:"H\h i\m" %}
                “01h 23m”.

                    {{ value|time }}
                is the same as:
                    {{ value|time:"TIME_FORMAT" }}




            timesince
            timeuntil
            title
            truncatechars
            truncatechars_html
            truncatewords
            truncatewords_html
            unordered_list
            upper
            urlencode
            urlize
            urlizetrunc
            wordcount
            wordwrap
            yesno
        Internationalization tags and filters
            i18n
            l10n
            tz
        Other tags and filters libraries
            django.contrib.humanize
            static
                static
                get_static_prefix
                get_media_prefix



    ----------------------------
    Models
        - single, definitive source of information about your data. It contains the essential fields and behaviors of the data you’re storing. Generally, each model maps to a single database table.




    


    -----------------------------
    Model Meta options
        - all the possible metadata options that you can give your model in its internal class Meta.


    app_label

        Options.app_label
            - If a model is defined outside of an application in INSTALLED_APPS, it must declare which app it belongs to:
                
                app_label = 'myapp'

            - If you want to represent a model with the format app_label.object_name or app_label.model_name you can use model._meta.label or model._meta.label_lower respectively.

    db_table

        Options.db_table
            - The name of the database table to use for the model:
                
                db_table = 'music_album'

    get_latest_by

        Options.get_latest_by
            - The name of a field or a list of field names in the model, typically DateField, DateTimeField, or IntegerField. This specifies the default field(s) to use in your model Manager’s latest() and earliest() methods.

                # Latest by ascending order_date.
                get_latest_by = "order_date"

                # Latest by priority descending, order_date ascending.
                get_latest_by = ['-priority', 'order_date']

    ------------------
    django.urls utility functions


        reverse()
            reverse(viewname, urlconf=None, args=None, kwargs=None, current_app=None)
                * viewname
                    - can be a URL pattern name or the callable view object. For example, given the following url:


                EX:
                        from news import views

                        path('archive/', views.archive, name='news-archive')
                    
                    you can use any of the following to reverse the URL:
                        # using the named URL
                        reverse('news-archive')

                        # passing a callable object
                        # (This is discouraged because you can't reverse namespaced views this way.)
                        from news import views
                        reverse(views.archive)
                    
                    If the URL accepts arguments, you may pass them in args. For example:
                        from django.urls import reverse

                        def myview(request):
                            return HttpResponseRedirect(reverse('arch-summary', args=[1945]))
                    
                    You can also pass kwargs instead of args. For example:
                        reverse('admin:app_list', kwargs={'app_label': 'auth'})

    ------------------
    INSTALLED_APPS
        - an application configuration class (preferred), or
        - a package containing an application.
        - included by default as a convenience for the common case.
        - application names and labels must be UNIQUE


    --------------------
    ModelAdmin objects

        class ModelAdmin

            The ModelAdmin class is the representation of a model in the admin interface. Usually, these are stored in a file named admin.py in your application. Let’s take a look at an example of the ModelAdmin:
                
                from django.contrib import admin
                from myproject.myapp.models import Author

                class AuthorAdmin(admin.ModelAdmin):
                    pass
                admin.site.register(Author, AuthorAdmin)


        The register decorator

            register(*models, site=django.admin.sites.site)
            
                There is also a decorator for registering your ModelAdmin classes:

                    from django.contrib import admin
                    from .models import Author

                    @admin.register(Author)
                    class AuthorAdmin(admin.ModelAdmin):
                        pass

                It’s given one or more model classes to register with the ModelAdmin. If you’re using a custom AdminSite, pass it using the site keyword argument:

                    from django.contrib import admin
                    from .models import Author, Editor, Reader
                    from myproject.admin_site import custom_admin_site

                    @admin.register(Author, Reader, Editor, site=custom_admin_site)
                    class PersonAdmin(admin.ModelAdmin):
                        pass
        

        ModelAdmin.list_max_show_all
            Set list_max_show_all to control how many items can appear on a “Show all” admin change list page. The admin will display a “Show all” link on the change list only if the total result count is less than or equal to this setting. By default, this is set to 200.

        ModelAdmin.list_per_page
            Set list_per_page to control how many items appear on each paginated admin change list page. By default, this is set to 100.

        ModelAdmin.list_select_related
            Set list_select_related to tell Django to use select_related() in retrieving the list of objects on the admin change list page. This can save you a bunch of database queries.

            The value should be either a boolean, a list or a tuple. Default is False.

            When value is True, select_related() will always be called. When value is set to False, Django will look at list_display and call select_related() if any ForeignKey is present.

            If you need more fine-grained control, use a tuple (or list) as value for list_select_related. Empty tuple will prevent Django from calling select_related at all. Any other tuple will be passed directly to select_related as parameters. For example:

            class ArticleAdmin(admin.ModelAdmin):
                list_select_related = ('author', 'category')
            will call select_related('author', 'category').

            If you need to specify a dynamic value based on the request, you can implement a get_list_select_related() method.


        ModelAdmin.show_full_result_count
            Set show_full_result_count to control whether the full count of objects should be displayed on a filtered admin page (e.g. 99 results (103 total)). If this option is set to False, a text like 99 results (Show all) is displayed instead.

            The default of show_full_result_count=True generates a query to perform a full count on the table which can be expensive if the table contains a large number of rows.

    InlineModelAdmin options

        InlineModelAdmin shares many of the same features as ModelAdmin, and adds some of its own (the shared features are actually defined in the BaseModelAdmin superclass). The shared features are:

            form
            fieldsets
            fields
            formfield_overrides
            exclude
            filter_horizontal
            filter_vertical
            ordering
            prepopulated_fields
            get_fieldsets()
            get_queryset()
            radio_fields
            readonly_fields
            raw_id_fields
            formfield_for_choice_field()
            formfield_for_foreignkey()
            formfield_for_manytomany()
            has_module_permission()

        🔹fieldsets
            - set to control the layout of admin “add” and “change” pages.
            - a list of two-tuples, in which each two-tuple represents a <fieldset> on the admin form page. (A <fieldset> is a “section” of the form.)

            🔹fields
                - A tuple of field names to display in this fieldset. This key is required.          
                - fields can contain values defined in readonly_fields to be displayed as read-only.
                - If you add the name of a callable to fields, the same rule applies as with the fields option: the callable must be listed in readonly_fields.
                
                ex:
                    {
                        'fields': ('first_name', 'last_name', 'address', 'city', 'state'),
                    }

                ex: 
                    As with the fields option, to display multiple fields on the same line, wrap those fields in their own tuple. In this example, the first_name and last_name fields will display on the same line:

                    {
                    'fields': (('first_name', 'last_name'), 'address', 'city', 'state'),
                    }
            🔹classes
                A list or tuple containing extra CSS classes to apply to the fieldset.

                ex:
                    {
                    'classes': ('wide', 'extrapretty'),
                    }

                - Two useful classes defined by the default admin site stylesheet are 
                    'collapse'
                        - Fieldsets with the collapse style will be initially collapsed in the admin and replaced with a small “click to expand” link.
                    'wide'. 
                        - Fieldsets with the wide style will be given extra horizontal space.

            🔹description
                - A string of optional extra text to be displayed at the top of each fieldset, under the heading of the fieldset. This string is not rendered for TabularInline due to its layout.
                - Note that this value is not HTML-escaped when it’s displayed in the admin interface. This lets you include HTML if you so desire. Alternatively you can use plain text and django.utils.html.escape() to escape any HTML special characters.
        
        🔹list_display
            - set to control which fields are displayed on the change list page of the admin.
            - a tuple of field names to display, as columns, on the change list page for the object:

        🔹list_filter
            - set to activate filters in the right sidebar of the change list page of the admin
            - should be a list or tuple of elements, where each element should be of one of the following types:
                
                🔺 a field name, where the specified field should be either a BooleanField, CharField, DateField, DateTimeField, IntegerField, ForeignKey or ManyToManyField:

                    class PersonAdmin(admin.ModelAdmin):
                        list_filter = ('is_staff', 'company')

                Field names in list_filter can also span relations using the __ lookup:

                    class PersonAdmin(admin.UserAdmin):
                        list_filter = ('company__name',)

                🔺a class inheriting from django.contrib.admin.SimpleListFilter, which you need to provide the title and parameter_name attributes to and override the lookups and queryset methods, e.g.:

                    from datetime import date

                    from django.contrib import admin
                    from django.utils.translation import gettext_lazy as _

                    class DecadeBornListFilter(admin.SimpleListFilter):
                        # Human-readable title which will be displayed in the
                        # right admin sidebar just above the filter options.
                        title = _('decade born')

                        # Parameter for the filter that will be used in the URL query.
                        parameter_name = 'decade'

                        def lookups(self, request, model_admin):
                            """
                            Returns a list of tuples. The first element in each
                            tuple is the coded value for the option that will
                            appear in the URL query. The second element is the
                            human-readable name for the option that will appear
                            in the right sidebar.
                            """
                            return (
                                ('80s', _('in the eighties')),
                                ('90s', _('in the nineties')),
                            )

                        def queryset(self, request, queryset):
                            """
                            Returns the filtered queryset based on the value
                            provided in the query string and retrievable via
                            `self.value()`.
                            """
                            # Compare the requested value (either '80s' or '90s')
                            # to decide how to filter the queryset.
                            if self.value() == '80s':
                                return queryset.filter(birthday__gte=date(1980, 1, 1),
                                                        birthday__lte=date(1989, 12, 31))
                            if self.value() == '90s':
                                return queryset.filter(birthday__gte=date(1990, 1, 1),
                                                        birthday__lte=date(1999, 12, 31))

                    class PersonAdmin(admin.ModelAdmin):
                        list_filter = (DecadeBornListFilter,)

                🔺a tuple, where the first element is a field name and the second element is a class inheriting from django.contrib.admin.FieldListFilter, for example:

                    class PersonAdmin(admin.ModelAdmin):
                        list_filter = (
                            ('is_staff', admin.BooleanFieldListFilter),
                        )
                    You can limit the choices of a related model to the objects involved in that relation using RelatedOnlyFieldListFilter:

                    class BookAdmin(admin.ModelAdmin):
                        list_filter = (
                            ('author', admin.RelatedOnlyFieldListFilter),
                        )

        🔹search_fields
            - set to enable a search box on the admin change list page. This should be set to a list of field names that will be searched whenever somebody submits a search query in that text box.
            - These fields should be some kind of text field, such as CharField or TextField. You can also perform a related lookup on a ForeignKey or ManyToManyField with the lookup API “follow” notation:

                search_fields = ['foreign_key__related_fieldname']

            EX:
                if you have a blog entry with an author, the following definition would enable searching blog entries by the email address of the author:

                    search_fields = ['user__email']

            - 
                Prefix	Lookup
                ^	startswith
                =	iexact
                @	search
                None	icontains

    InlineModelAdmin objects

        class InlineModelAdmin
        
        class TabularInline
        
        class StackedInline
            
            inlines
                - The admin interface has the ability to edit models on the same page as a parent model. Suppose you have these two models: 
                
                    from django.db import models

                    class Author(models.Model):
                    name = models.CharField(max_length=100)

                    class Book(models.Model):
                    author = models.ForeignKey(Author, on_delete=models.CASCADE)
                    title = models.CharField(max_length=100)

            You can edit the books authored by an author on the author page. You add inlines to a model by specifying them in a ModelAdmin.inlines:

                from django.contrib import admin

                class BookInline(admin.TabularInline):
                    model = Book

                class AuthorAdmin(admin.ModelAdmin):
                    inlines = [
                        BookInline,
                    ]


        Django provides two subclasses of InlineModelAdmin and they are:
            TabularInline
            StackedInline

    ---------------------
    TEMPLATES
        Default: [] (Empty list)

        A list containing the settings for all template engines to be used with Django. Each item of the list is a dictionary containing the options for an individual engine.

        Here’s a setup that tells the Django template engine to load templates from the templates subdirectory inside each installed application:

            TEMPLATES = [
                {
                    'BACKEND': 'django.template.backends.django.DjangoTemplates',
                    'APP_DIRS': True,
                },
            ]
            
        The following options are available for all backends.

        BACKEND
            - Default: Not defined
            - The template backend to use. The built-in template backends are:
                'django.template.backends.django.DjangoTemplates'
                'django.template.backends.jinja2.Jinja2'

            - You can use a template backend that doesn’t ship with Django by setting BACKEND to a fully-qualified path (i.e. 'mypackage.whatever.Backend').

        NAME
            - Default: see below
            - The alias for this particular template engine. It’s an identifier that allows selecting an engine for rendering. Aliases must be unique across all configured template engines.
            - It defaults to the name of the module defining the engine class, i.e. the next to last piece of BACKEND, when it isn’t provided. For example if the backend is 'mypackage.whatever.Backend' then its default name is 'whatever'.

        DIRS
            - Default: [] (Empty list)
            - Directories where the engine should look for template source files, in search order.

        APP_DIRS
            - Default: False
            - Whether the engine should look for template source files inside installed applications.
            - NOTE: The default settings.py file created by django-admin startproject sets 'APP_DIRS': True.

        OPTIONS
            - Default: {} (Empty dict)
            - Extra parameters to pass to the template backend. Available parameters vary depending on the template backend. See DjangoTemplates and Jinja2 for the options of the built-in backends.

        TEST_RUNNER
            - Default: 'django.test.runner.DiscoverRunner'
            - The name of the class to use for starting the test suite. See Using different testing frameworks.

        TEST_NON_SERIALIZED_APPS
            - Default: [] (Empty list)
            - In order to restore the database state between tests for TransactionTestCases and database backends without transactions, Django will serialize the contents of all apps when it starts the test run so it can then reload from that copy before running tests that need it.
            - This slows down the startup time of the test runner; if you have apps that you know don’t need this feature, you can add their full names in here (e.g. 'django.contrib.contenttypes') to exclude them from this serialization process.

        THOUSAND_SEPARATOR
            - Default: ',' (Comma)
            - Default thousand separator used when formatting numbers. This setting is used only when USE_THOUSAND_SEPARATOR is True and NUMBER_GROUPING is greater than 0.
            - Note that if USE_L10N is set to True, then the locale-dictated format has higher precedence and will be applied instead.

        TIME_FORMAT
            - Default: 'P' (e.g. 4 p.m.)
            - The default formatting to use for displaying time fields in any part of the system. Note that if USE_L10N is set to True, then the locale-dictated format has higher precedence and will be applied instead. See allowed date format strings.

        TIME_INPUT_FORMATS
            Default:
                [
                    '%H:%M:%S',     # '14:30:59'
                    '%H:%M:%S.%f',  # '14:30:59.000200'
                    '%H:%M',        # '14:30'
                ]
            - A list of formats that will be accepted when inputting data on a time field. Formats will be tried in order, using the first valid one. Note that these format strings use Python’s datetime module syntax, not the format strings from the date template filter.
            - When USE_L10N is True, the locale-dictated format has higher precedence and will be applied instead.

        TIME_ZONE
            Default: 'America/Chicago'
            A string representing the time zone for this installation. See the list of time zones.